<!-- CONTAINER

  ðŸ”¹ .container 
      - Fixed-width layout
      - Adjusts automatically based on screen size (responsive)
      - Adds padding and centers content

  ðŸ§  Use Case:
    Use .container when you want your layout/content to have a fixed width that auto-adjusts for different screen sizes. It keeps the content neat and centered.

    âœ… Great for:
      - Website main content area
      - Cards, forms, and text blocks
      - Blogs or articles
      - Keeping layout clean and readable on all devices

  ðŸ”¹ .container-fluid
      - 100% width layout
      - Spans the full width of the screen, regardless of screen size

  ðŸ§  Use Case:
    Use .container-fluid when you want your layout/content to stretch across the entire screen.

    âœ… Great for:
      - Banners
      - Full-width images
      - Fluid grid layouts
      - Background sections
-->


<!-- TYPOGRAPHY

  ðŸ”¹ Headings
      - Use <h1> to <h6> for HTML headings
      - Bootstrap adds margin and styling by default
      - You can also use .h1 to .h6 classes on any element for heading styles

  âœ… Example:
      <h1>Heading 1</h1>
      <p class="h3">Paragraph with Heading 3 style</p>

  ðŸ”¹ Display Headings
      - Larger, bolder headings for hero sections or banners
      - Use .display-1 to .display-6

  âœ… Example:
      <h1 class="display-2">Big Title</h1>

  ðŸ”¹ Lead Text
      - Use .lead to make a paragraph stand out (slightly larger and lighter)

  âœ… Example:
      <p class="lead">This is an important intro paragraph.</p>

  ðŸ”¹ Text Alignment
      - Align text using .text-start, .text-center, .text-end

  âœ… Example:
      <p class="text-center">This text is centered.</p>

  ðŸ”¹ Text Colors
      - Use classes like .text-primary, .text-success, .text-danger, etc.

  âœ… Example:
      <p class="text-danger">Error: Something went wrong.</p>

  ðŸ”¹ Font Weight & Style
      - Use .fw-bold, .fw-normal, .fw-light for weight
      - Use .fst-italic or .fst-normal for style

  âœ… Example:
      <p class="fw-bold fst-italic">Bold and italic text</p>

  ðŸ”¹ Text Transform
      - .text-uppercase â†’ ALL CAPS
      - .text-lowercase â†’ lowercase
      - .text-capitalize â†’ Capitalize First Letter

  âœ… Example:
      <p class="text-uppercase">uppercase text</p>

  ðŸ”¹ Text Truncation
      - Use .text-truncate to shorten text with "..." (must be inside a block with width)

  âœ… Example:
      <p class="text-truncate" style="max-width: 200px;">This is a long text that will be truncated.</p>
-->


<!-- COLORS

  ðŸ”¹ Text Colors
      - Use text color utility classes to style text with Bootstrap theme colors
      - Format: .text-[color]

  âœ… Common Colors:
      - .text-primary       â†’ Blue
      - .text-secondary     â†’ Gray
      - .text-success       â†’ Green
      - .text-danger        â†’ Red
      - .text-warning       â†’ Yellow/Orange
      - .text-info          â†’ Light Blue
      - .text-light         â†’ White (use on dark backgrounds)
      - .text-dark          â†’ Dark Gray
      - .text-muted         â†’ Muted light gray text
      - .text-body          â†’ Default text color

  âœ… Example:
      <p class="text-success">Success! Your action was completed.</p>

  ðŸ”¹ Background Colors
      - Use .bg-[color] to set background color

  âœ… Example:
      <div class="bg-warning text-dark p-3">Warning Box</div>

  ðŸ”¹ Contextual Classes
      - Combine bg and text classes for styled alerts, cards, buttons, etc.

  âœ… Example:
      <div class="bg-danger text-white p-3">Error: Something went wrong.</div>

  ðŸ”¹ Opacity Helpers
      - Use .bg-opacity-[0â€“100] to control background color opacity
      - Works only with background utility colors

  âœ… Example:
      <div class="bg-primary bg-opacity-50 text-white p-3">Semi-transparent blue box</div>

  ðŸ”¹ Custom Colors
      - You can define custom colors using inline style or CSS
      - Bootstrap also supports CSS variables for theming

  âœ… Example:
      <div style="background-color: #ff8800; color: white;">Custom Color Box</div>
-->


<!-- BACKGROUND COLORS

  ðŸ”¹ Background Utility Classes
      - Use .bg-[color] to set the background color of an element
      - Helps highlight sections, cards, buttons, alerts, etc.

  âœ… Common Classes:
      - .bg-primary       â†’ Blue
      - .bg-secondary     â†’ Gray
      - .bg-success       â†’ Green
      - .bg-danger        â†’ Red
      - .bg-warning       â†’ Yellow/Orange
      - .bg-info          â†’ Light Blue
      - .bg-light         â†’ Light Gray/White
      - .bg-dark          â†’ Dark Gray/Black
      - .bg-white         â†’ Pure white
      - .bg-transparent   â†’ No background color

  âœ… Example:
      <div class="bg-success text-white p-3">
        This is a success message box.
      </div>

  ðŸ”¹ Combine with Text Colors
      - For better contrast, combine with .text-[color]

  âœ… Example:
      <div class="bg-dark text-white p-3">
        Dark background with white text
      </div>

  ðŸ”¹ Background Opacity
      - Control transparency with .bg-opacity-[0â€“100]
      - Only works with Bootstrap background utility classes

  âœ… Example:
      <div class="bg-primary bg-opacity-25 text-dark p-3">
        Semi-transparent blue background
      </div>

  ðŸ”¹ Custom Background Color
      - Use inline CSS or custom classes if you need specific colors

  âœ… Example:
      <div style="background-color: #00c896; color: white;" class="p-3">
        Custom background color
      </div>
-->


<!-- GRID SYSTEM

  ðŸ”¹ What is the Grid?
      - Bootstrapâ€™s grid system uses a 12-column layout
      - Based on flexbox
      - Helps create responsive layouts quickly

  âœ… Basic Structure:
      <div class="container">
        <div class="row">
          <div class="col">Column 1</div>
          <div class="col">Column 2</div>
        </div>
      </div>

  ðŸ”¹ Columns
      - Use .col to create equal-width columns
      - Use .col-[number] for fixed-width (1 to 12)
      - Total of 12 columns per row

  âœ… Example:
      <div class="col-6">Half Width</div>
      <div class="col-4">1/3 Width</div>
      <div class="col-8">2/3 Width</div>

  ðŸ”¹ Responsive Breakpoints
      - You can target screen sizes using:
        - .col-sm-  â†’ â‰¥576px
        - .col-md-  â†’ â‰¥768px
        - .col-lg-  â†’ â‰¥992px
        - .col-xl-  â†’ â‰¥1200px
        - .col-xxl- â†’ â‰¥1400px

  âœ… Example:
      <div class="col-12 col-md-6">Full on mobile, half on desktop</div>

  ðŸ”¹ Nesting
      - You can nest rows/columns inside a column

  âœ… Example:
      <div class="col">
        <div class="row">
          <div class="col">Nested Col</div>
        </div>
      </div>

  ðŸ”¹ Auto Layout
      - Columns without a number auto adjust to fit

  âœ… Example:
      <div class="col">Auto 1</div>
      <div class="col">Auto 2</div>

  ðŸ”¹ Offset
      - Use .offset-[breakpoint]-[number] to shift columns

  âœ… Example:
      <div class="col-md-4 offset-md-4">Centered Column</div>

  ðŸ”¹ Gutters (Spacing between columns)
      - Use .g-[1â€“5] or .gy- / .gx- to control vertical/horizontal spacing

  âœ… Example:
      <div class="row g-3">3 spacing between columns and rows</div>

-->


<!-- PADDING

  ðŸ”¹ What is Padding?
      - Padding is the space **inside** an element (between content and border)
      - Bootstrap provides utility classes to control padding easily

  ðŸ”¹ Class Format:
      .p{side}-{breakpoint?}-{size}

      - p  â†’ padding on all sides
      - pt â†’ padding-top
      - pe â†’ padding-end (right in LTR)
      - pb â†’ padding-bottom
      - ps â†’ padding-start (left in LTR)
      - px â†’ left and right (horizontal)
      - py â†’ top and bottom (vertical)

  ðŸ”¹ Size Scale:
      - 0 (0px)
      - 1 (0.25rem)
      - 2 (0.5rem)
      - 3 (1rem)
      - 4 (1.5rem)
      - 5 (3rem)

  âœ… Example:
      <div class="p-3">Padding on all sides (1rem)</div>
      <div class="pt-4 pb-2">Top: 1.5rem, Bottom: 0.5rem</div>
      <div class="px-5">Left and Right: 3rem</div>

  ðŸ”¹ Responsive Padding
      - You can use responsive breakpoints: sm, md, lg, xl, xxl

  âœ… Example:
      <div class="p-2 p-md-4">Smaller padding on mobile, larger on desktop</div>

  ðŸ”¹ Removing Padding
      - Use .p-0 or specific side classes like .pt-0 to remove padding

  âœ… Example:
      <div class="py-0 px-3">No vertical padding, 1rem horizontal padding</div>

-->


<!-- MARGIN

  ðŸ”¹ What is Margin?
      - Margin is the space **outside** an element (between the elementâ€™s border and surrounding elements)
      - Bootstrap provides utility classes to control margin easily

  ðŸ”¹ Class Format:
      .m{side}-{breakpoint?}-{size}

      - m  â†’ margin on all sides
      - mt â†’ margin-top
      - me â†’ margin-end (right in LTR)
      - mb â†’ margin-bottom
      - ms â†’ margin-start (left in LTR)
      - mx â†’ left and right (horizontal)
      - my â†’ top and bottom (vertical)

  ðŸ”¹ Size Scale:
      - 0 (0px)
      - 1 (0.25rem)
      - 2 (0.5rem)
      - 3 (1rem)
      - 4 (1.5rem)
      - 5 (3rem)

  âœ… Example:
      <div class="m-3">Margin on all sides (1rem)</div>
      <div class="mt-4 mb-2">Top: 1.5rem, Bottom: 0.5rem</div>
      <div class="mx-5">Left and Right: 3rem</div>

  ðŸ”¹ Responsive Margin
      - You can use responsive breakpoints: sm, md, lg, xl, xxl

  âœ… Example:
      <div class="m-2 m-md-4">Smaller margin on mobile, larger on desktop</div>

  ðŸ”¹ Removing Margin
      - Use .m-0 or specific side classes like .mt-0 to remove margin

  âœ… Example:
      <div class="my-0 mx-3">No vertical margin, 1rem horizontal margin</div>

-->


<!-- RESPONSIVE COLUMNS

  ðŸ”¹ What are Responsive Columns?
      - Bootstrapâ€™s grid system allows creating flexible, responsive layouts using rows and columns
      - Columns adapt based on screen size using breakpoint-specific classes

  ðŸ”¹ Grid Basics:
      - The grid has 12 columns per row
      - You place content inside columns that specify how many of the 12 parts they take
      - Columns automatically stack vertically on smaller screens unless specified otherwise

  ðŸ”¹ Class Format for Columns:
      .col-{breakpoint}-{size}

      - col â†’ auto width columns that share available space equally
      - {breakpoint} â†’ responsive breakpoint (sm, md, lg, xl, xxl)
      - {size} â†’ number from 1 to 12 (how many columns to span)

  ðŸ”¹ Breakpoints:
      - sm  (â‰¥576px)
      - md  (â‰¥768px)
      - lg  (â‰¥992px)
      - xl  (â‰¥1200px)
      - xxl (â‰¥1400px)

  âœ… Examples:
      <div class="row">
        <div class="col-12 col-md-6">Full width on mobile, half width on md and up</div>
        <div class="col-12 col-md-6">Full width on mobile, half width on md and up</div>
      </div>

      <div class="row">
        <div class="col-sm-4">One-third width on sm and up</div>
        <div class="col-sm-8">Two-thirds width on sm and up</div>
      </div>

  ðŸ”¹ Auto Layout Columns:
      - Using just .col without a number shares space evenly
      - Can combine with breakpoint for responsive behavior

  âœ… Example:
      <div class="row">
        <div class="col">Auto width</div>
        <div class="col">Auto width</div>
        <div class="col">Auto width</div>
      </div>

  ðŸ”¹ Nesting Columns:
      - You can nest rows and columns inside a column for more complex layouts

  ðŸ”¹ Column Ordering:
      - Use order-{breakpoint}-{number} classes to change column order responsively

  âœ… Example:
      <div class="row">
        <div class="col order-2">Second on default</div>
        <div class="col order-1">First on default</div>
      </div>

  ðŸ”¹ Offsetting Columns:
      - Use offset-{breakpoint}-{size} to add space to the left of a column

  âœ… Example:
      <div class="row">
        <div class="col-md-4 offset-md-4">Centered column on md and up</div>
      </div>

-->


<!-- FLEXBOX LAYOUT

  ðŸ”¹ What is Flexbox?
      - Flexbox is a layout model that arranges elements in a row or column.
      - It helps distribute space and align items efficiently inside a container.

  ðŸ”¹ Basic Setup:
      - Use `.d-flex` to make a container a flexbox.

      âœ… Example:
      <div class="d-flex">...</div>

  ðŸ”¹ Direction:
      - Use `.flex-row` for horizontal layout (default)
      - Use `.flex-column` for vertical layout

      âœ… Example:
      <div class="d-flex flex-column">Vertical layout</div>

  ðŸ”¹ Justify Content (Main Axis):
      - Controls horizontal alignment in `.flex-row`
      - Controls vertical alignment in `.flex-column`

      .justify-content-{value}
        - start â†’ align to start
        - end â†’ align to end
        - center â†’ center items
        - between â†’ space between
        - around â†’ space around
        - evenly â†’ equal spacing

      âœ… Example:
      <div class="d-flex justify-content-between">...</div>

  ðŸ”¹ Align Items (Cross Axis):
      - Aligns items vertically in `.flex-row`
      - Aligns items horizontally in `.flex-column`

      .align-items-{value}
        - start â†’ align to start
        - end â†’ align to end
        - center â†’ center items
        - baseline â†’ align text baselines
        - stretch â†’ stretch to fill (default)

      âœ… Example:
      <div class="d-flex align-items-center">...</div>

  ðŸ”¹ Align Self (Per Item):
      - Override alignment for a single item

      .align-self-{value}

      âœ… Example:
      <div class="align-self-end">Align this item to end</div>

  ðŸ”¹ Wrapping:
      - Use `.flex-wrap` to allow items to wrap
      - Use `.flex-nowrap` to prevent wrapping (default)

      âœ… Example:
      <div class="d-flex flex-wrap">...</div>

  ðŸ”¹ Flex Grow/Shrink:
      - .flex-grow-1 â†’ item can grow to fill space
      - .flex-shrink-0 â†’ item wonâ€™t shrink

      âœ… Example:
      <div class="flex-grow-1">Takes up remaining space</div>

  ðŸ”¹ Order:
      - Use `.order-{n}` to control item order (0â€“5 by default)

      âœ… Example:
      <div class="order-1">This appears first</div>

  ðŸ”¹ Responsive Flex:
      - Add breakpoints: `.d-sm-flex`, `.flex-md-column`, etc.

      âœ… Example:
      <div class="d-flex flex-column flex-md-row">Stack on mobile, row on desktop</div>

-->


<!-- IMAGES

  ðŸ”¹ What are Image Utilities?
      - Bootstrap provides helper classes to style and control images easily.
      - These utilities help with responsiveness, alignment, shapes, and spacing.

  ðŸ”¹ Responsive Images:
      - Use `.img-fluid` to make an image scale nicely with the parent container
      - Applies `max-width: 100%` and `height: auto`

      âœ… Example:
      <img src="photo.jpg" class="img-fluid" alt="Responsive image">

  ðŸ”¹ Image Thumbnails:
      - Use `.img-thumbnail` for a bordered, padded image with rounded corners

      âœ… Example:
      <img src="avatar.jpg" class="img-thumbnail" alt="Profile picture">

  ðŸ”¹ Image Shapes:
      - `.rounded` â†’ slightly rounded corners
      - `.rounded-circle` â†’ circular image
      - `.rounded-0` â†’ no rounding (square)

      âœ… Examples:
      <img src="pic.jpg" class="rounded" alt="">
      <img src="user.jpg" class="rounded-circle" alt="">
      <img src="box.jpg" class="rounded-0" alt="">

  ðŸ”¹ Image Alignment:
      - Use Bootstrapâ€™s text alignment utilities with inline images:
        - `.text-start`, `.text-center`, `.text-end`

      âœ… Example:
      <div class="text-center">
        <img src="logo.png" class="img-fluid" alt="Centered image">
      </div>

  ðŸ”¹ Image Float:
      - `.float-start` â†’ float left
      - `.float-end` â†’ float right
      - `.float-none` â†’ remove float

      âœ… Example:
      <img src="icon.png" class="float-end" alt="Floated right">

  ðŸ”¹ Image Width & Height:
      - You can control dimensions using utility classes like:
        - `.w-25`, `.w-50`, `.w-100` â†’ width: 25%, 50%, 100%
        - `.h-auto`, `.h-100` â†’ height utilities

      âœ… Example:
      <img src="banner.jpg" class="w-100 h-auto" alt="Full-width image">

  ðŸ”¹ Responsive Display:
      - Combine with responsive display classes like `.d-none d-md-block` to show/hide images on different screens

      âœ… Example:
      <img src="desktop.jpg" class="d-none d-md-block" alt="Visible on desktop only">

-->


<!-- CARDS

  ðŸ”¹ What are Cards?
      - Cards are flexible and extensible content containers.
      - Used to display content such as images, text, lists, buttons, etc.
      - Comes with options for headers, footers, content alignment, and more.

  ðŸ”¹ Basic Card:
      - Use `.card` as the main wrapper
      - Inside it, use `.card-body` to wrap main content

      âœ… Example:
      <div class="card">
        <div class="card-body">
          This is a basic card.
        </div>
      </div>

  ðŸ”¹ Card with Title & Text:
      - Use `.card-title` for heading
      - Use `.card-text` for supporting content

      âœ… Example:
      <div class="card">
        <div class="card-body">
          <h5 class="card-title">Card Title</h5>
          <p class="card-text">This is some text inside the card.</p>
        </div>
      </div>

  ðŸ”¹ Card with Image:
      - Use `.card-img-top` or `.card-img-bottom` to add images

      âœ… Example:
      <div class="card">
        <img src="img.jpg" class="card-img-top" alt="Top image">
        <div class="card-body">
          <p class="card-text">Image on top</p>
        </div>
      </div>

  ðŸ”¹ Card Header & Footer:
      - Use `.card-header` and `.card-footer` for additional sections

      âœ… Example:
      <div class="card">
        <div class="card-header">Header</div>
        <div class="card-body">Body Content</div>
        <div class="card-footer">Footer</div>
      </div>

  ðŸ”¹ Card with List Group:
      - Use `.list-group` inside `.card` for lists

      âœ… Example:
      <div class="card">
        <ul class="list-group list-group-flush">
          <li class="list-group-item">Item 1</li>
          <li class="list-group-item">Item 2</li>
        </ul>
      </div>

  ðŸ”¹ Card Layout (Grid):
      - Use Bootstrap Grid (`.row` & `.col`) for card layout

      âœ… Example:
      <div class="row">
        <div class="col-md-4">
          <div class="card">Card 1</div>
        </div>
        <div class="col-md-4">
          <div class="card">Card 2</div>
        </div>
      </div>

  ðŸ”¹ Card Alignment:
      - Use text alignment utilities: `.text-start`, `.text-center`, `.text-end`

      âœ… Example:
      <div class="card text-center">
        <div class="card-body">Centered Card</div>
      </div>

  ðŸ”¹ Background & Border:
      - Use contextual classes: `.bg-primary`, `.text-white`, `.border-success`, etc.

      âœ… Example:
      <div class="card bg-success text-white">
        <div class="card-body">Green background card</div>
      </div>

  ðŸ”¹ Horizontal Cards:
      - Use `.row` and `.col-md` inside `.card` for horizontal layout

      âœ… Example:
      <div class="card">
        <div class="row g-0">
          <div class="col-md-4">
            <img src="img.jpg" class="img-fluid rounded-start" alt="...">
          </div>
          <div class="col-md-8">
            <div class="card-body">
              <h5 class="card-title">Horizontal Card</h5>
              <p class="card-text">Text content here</p>
            </div>
          </div>
        </div>
      </div>

-->


<!-- FORMS

  ðŸ”¹ What are Forms?
      - Forms are used to collect user input.
      - Bootstrap provides form styles for inputs, labels, checkboxes, radios, selects, and more.
      - Helps with consistent design and layout across browsers.

  ðŸ”¹ Basic Form Structure:
      - Wrap inputs inside a `<form>` tag
      - Use `.form-label`, `.form-control`, etc.

      âœ… Example:
      <form>
        <div class="mb-3">
          <label class="form-label">Name</label>
          <input type="text" class="form-control" placeholder="Enter name">
        </div>
      </form>

  ðŸ”¹ Form Inputs:
      - Use `.form-control` for text, email, password, number, textarea, etc.

      âœ… Example:
      <input type="email" class="form-control" placeholder="Enter email">

  ðŸ”¹ Labels & Placeholders:
      - Use `<label>` with `.form-label`
      - Use `placeholder` to show hint inside input

      âœ… Example:
      <label class="form-label">Email</label>
      <input type="email" class="form-control" placeholder="you@example.com">

  ðŸ”¹ Form Select:
      - Use `<select class="form-select">` for dropdowns

      âœ… Example:
      <select class="form-select">
        <option>Select option</option>
        <option>Option 1</option>
      </select>

  ðŸ”¹ Checkboxes & Radios:
      - Use `.form-check`, `.form-check-input`, and `.form-check-label`

      âœ… Example:
      <div class="form-check">
        <input class="form-check-input" type="checkbox" id="check1">
        <label class="form-check-label" for="check1">Check me</label>
      </div>

  ðŸ”¹ Form Layouts:
      - Use `.row` and `.col` for grid layout in forms

      âœ… Example:
      <form>
        <div class="row">
          <div class="col">
            <input type="text" class="form-control" placeholder="First name">
          </div>
          <div class="col">
            <input type="text" class="form-control" placeholder="Last name">
          </div>
        </div>
      </form>

  ðŸ”¹ Form Validation States:
      - Use `.is-valid` and `.is-invalid` to show validation feedback

      âœ… Example:
      <input type="text" class="form-control is-valid">
      <div class="valid-feedback">Looks good!</div>

  ðŸ”¹ Disabled & Readonly:
      - Use `disabled` or `readonly` attributes

      âœ… Example:
      <input type="text" class="form-control" disabled placeholder="Disabled input">

  ðŸ”¹ Inline Forms:
      - Use `.row`, `.col-auto`, and spacing utilities for inline layout

      âœ… Example:
      <form class="row g-3 align-items-center">
        <div class="col-auto">
          <label class="col-form-label">Email</label>
        </div>
        <div class="col-auto">
          <input type="email" class="form-control">
        </div>
      </form>

-->
